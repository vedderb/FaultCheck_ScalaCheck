/*
	Copyright 2014 Benjamin Vedder	benjamin@vedder.se

	This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
    */

package e2e;

import java.util.Collections;
import java.util.Iterator;
import org.bridj.BridJ;
import org.bridj.CRuntime;
import org.bridj.FlagSet;
import org.bridj.IntValuedEnum;
import org.bridj.Pointer;
import org.bridj.ann.Library;
import org.bridj.ann.Ptr;
import org.bridj.ann.Runtime;
/**
 * Wrapper for library <b>E2E</b><br>
 * This file was autogenerated by <a href="http://jnaerator.googlecode.com/">JNAerator</a>,<br>
 * a tool written by <a href="http://ochafik.com/">Olivier Chafik</a> that <a href="http://code.google.com/p/jnaerator/wiki/CreditsAndLicense">uses a few opensource projects.</a>.<br>
 * For help, please visit <a href="http://nativelibs4java.googlecode.com/">NativeLibs4Java</a> or <a href="http://bridj.googlecode.com/">BridJ</a> .
 */
@Library("e2etest") 
@Runtime(CRuntime.class) 
public class E2ELibrary {
	static {
		BridJ.register();
	}
	/**
	 * enum values<br>
	 * <i>native declaration : e2e_protection.h:13</i>
	 */
	public enum E2E_RESULT implements IntValuedEnum<E2E_RESULT > {
		E2E_RES_OK(0),
		E2E_RES_OK_SOME_LOST(1),
		E2E_RES_REPETITION(2),
		E2E_RES_OUT_OF_SEQUENCE(3),
		E2E_RES_WRONG_CRC(4),
		E2E_RES_NO_CONFIGURATION(5),
		E2E_RES_UNDEFINED(6);
		E2E_RESULT(long value) {
			this.value = value;
		}
		public final long value;
		public long value() {
			return this.value;
		}
		public Iterator<E2E_RESULT > iterator() {
			return Collections.singleton(this).iterator();
		}
		public static IntValuedEnum<E2E_RESULT > fromValue(int value) {
			return FlagSet.fromValue(value, values());
		}
	};
	/** <i>native declaration : e2e_protection.h</i> */
	public static final int E2E_OVERHEAD_SIZE = (int)3;
	/**
	 * Public functions<br>
	 * Original signature : <code>E2E_RESULT e2e_init(E2E_CONFIGURATION*)</code><br>
	 * <i>native declaration : e2e_protection.h:18</i>
	 */
	public static IntValuedEnum<E2ELibrary.E2E_RESULT > e2e_init(Pointer<E2E_CONFIGURATION > conf) {
		return FlagSet.fromValue(e2e_init(Pointer.getPeer(conf)), E2ELibrary.E2E_RESULT.class);
	}
	protected native static int e2e_init(@Ptr long conf);
	/**
	 * Original signature : <code>E2E_RESULT e2e_protect(unsigned char*)</code><br>
	 * <i>native declaration : e2e_protection.h:20</i>
	 */
	public static IntValuedEnum<E2ELibrary.E2E_RESULT > e2e_protect(Pointer<Byte > data) {
		return FlagSet.fromValue(e2e_protect(Pointer.getPeer(data)), E2ELibrary.E2E_RESULT.class);
	}
	protected native static int e2e_protect(@Ptr long data);
	/**
	 * Original signature : <code>E2E_RESULT e2e_check(unsigned char*)</code><br>
	 * <i>native declaration : e2e_protection.h:22</i>
	 */
	public static IntValuedEnum<E2ELibrary.E2E_RESULT > e2e_check(Pointer<Byte > data) {
		return FlagSet.fromValue(e2e_check(Pointer.getPeer(data)), E2ELibrary.E2E_RESULT.class);
	}
	protected native static int e2e_check(@Ptr long data);
}
